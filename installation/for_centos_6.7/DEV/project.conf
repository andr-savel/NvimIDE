" This file contains example of all possible variables which can be specified for particular project

" obligatory variables
let g:nvim_ide_project_root = $NVIM_IDE_SRC_ROOT . "/DEV"


" optional variables
"     fzf source
"         with additional files exclusion
let g:nvim_ide_fzf_source = 'rg --files -g \!*.o -g \!*pb.h -g \!*pb.cc -g \!*_pb2.py'
"         or from git files (auto-select example: nnoremap <expr> <C-p> (len(system('git rev-parse')) ? ':Files' : ':GFiles')."\<cr>")
" let g:nvim_ide_fzf_source = 'git ls-files'

"     basic command for search in project files content
let g:nvim_ide_content_search_rg_basic_cmd = 'rg --vimgrep --smart-case -g \!build_* -g \!user_data'

"     commang for compilation database generation for C/C++
let g:nvim_ide_cpp_compilation_database_command = g:nvim_ide_project_root . '/generate_compile_database.sh'
"     num threads for C/C++ language server
let g:nvim_ide_cpp_language_server_threads = 8

"     build root (for cmake project, for exmaple, build root can differ from project root)
let g:nvim_ide_build_root = g:nvim_ide_project_root . "/build"
"     build command for project (C/C++, go)
let g:nvim_ide_build_command = "mkdep"

"     path to binary (or package dir for golang) which should be debugged
let g:nvim_ide_debuggee_binary_path = $NVIM_IDE_SRC_ROOT . "/DEV/a.out"

"     arguments for debuggee binary
" let g:nvim_ide_debuggee_binary_args = 'arg1 arg2 arg3'

"     switch-on icons (needs patched font, see README.md for details)
" let g:nvim_ide_allow_icons = v:true
