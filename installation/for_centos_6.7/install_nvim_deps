#!/bin/bash

#----------------------- build and install system parts

# build glibc-2.14
glibc_dir=$NVIM_IDE_INSTALL_RESULT/glibc_installation
if [ ! -d "$glibc_dir" ]; then
    tar -xzf glibc-2.14.tar.gz
    cd glibc-2.14
    mkdir build
    cd build/
    ../configure --prefix=$glibc_dir
    make -j 16
    make install
    cd ../../
fi
export LD_LIBRARY_PATH=$glibc_dir/lib:$LD_LIBRARY_PATH

# build gcc
gcc_dir=$NVIM_IDE_INSTALL_RESULT/gcc_installation
if [ ! -d "$gcc_dir" ]; then
    tar -xzf gcc-9.1.0.tar.gz
    cd gcc-9.1.0
    cp ../gmp-6.1.0.tar.bz2 .
    tar -xf gmp-6.1.0.tar.bz2
    cp -dr gmp-6.1.0 gmp
    cp ../mpfr-3.1.4.tar.bz2 .
    tar -xf mpfr-3.1.4.tar.bz2
    cp -dr mpfr-3.1.4 mpfr
    cp ../mpc-1.0.3.tar.gz .
    tar -xzf mpc-1.0.3.tar.gz
    cp -dr mpc-1.0.3 mpc
    cp ../isl-0.18.tar.bz2 .
    tar -xf isl-0.18.tar.bz2
    cp -dr isl-0.18 isl
    ./configure --prefix=$gcc_dir --enable-languages=c,c++,fortran --disable-multilib
    make -j 16
    make install
    cd ../
fi
export PATH=$gcc_dir/bin:$PATH
export LD_LIBRARY_PATH=$gcc_dir/lib64:$LD_LIBRARY_PATH

# install ripgrep
tar -xzf ripgrep-13.0.0-x86_64-unknown-linux-musl.tar.gz
cp ripgrep-13.0.0-x86_64-unknown-linux-musl/rg $NVIM_IDE_INSTALL_RESULT

# install nvim
chmod +x nvim.appimage
cp nvim.appimage $NVIM_IDE_INSTALL_RESULT

# get config for nvim
unzip main.zip
cp -dr NvimIDE-main $NVIM_IDE_INSTALL_RESULT

# install neovim python module with dependencies
python3.7 -m pip install --user neovim --find-links=. --no-index

# install compdb python module
python3.7 -m pip install --user ./compdb-0.2.0.tar.gz

# install pyright python language server
python3.7 -m pip install --user pyright --find-links=. --no-index

# install clangd C/C++ language server
llvm_dir=$NVIM_IDE_INSTALL_RESULT/llvm_installation
if [ ! -d "$llvm_dir" ]; then
    tar -xzf llvmorg-14.0.3
    cd `ls -d llvm-llvm-project-*`
    mkdir build
    cd build
    export CC=`which gcc`
    export CXX=`which g++`
    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lldb" -DLLVM_TARGETS_TO_BUILD=X86 -DCMAKE_INSTALL_PREFIX=$NVIM_IDE_INSTALL_RESULT/llvm_installation $PWD/../llvm/
    make -j 16 clangd lldb lldb-vscode lldb-server llvm-sybolizer
    mkdir -p $llvm_dir
    cp -dr bin $llvm_dir
    cp -dr lib $llvm_dir
    cd ../../
fi
export PATH=$llvm_dir/bin:$PATH

# xclip
unzip master.zip
cd xclip-master
autoconf
xclip_dir=$NVIM_IDE_INSTALL_RESULT/xclip_installation
./configure --prefix=$xclip_dir
make
make install
cd ../
export PATH=$xclip_dir/bin:$PATH


#------------------------- build and install config and plugins

rm -rf ~/.config/nvim
mkdir -p ~/.config/nvim
ln -s $NVIM_IDE_INSTALL_RESULT/NvimIDE-main/config/* ~/.config/nvim

rm -rf ~/.local/share/nvim
mkdir -p ~/.local/share/nvim
cp ../../local_share_nvim.tar.gz .
tar -xzf local_share_nvim.tar.gz
cp -dr ./local_share_nvim/* ~/.local/share/nvim

for t in `ls tree-sitter-*`
do
    prefix=`echo $t | awk -F "." '{print $1}'`
    mkdir $prefix
    lang=`echo $prefix | awk -F "-" '{print $3}'`

    tar -xzf $t -C $prefix
    cd `ls -d $prefix/*`

    cc -o parser.so -I./src  src/*c -shared -Os -lstdc++ -fPIC -DUINT8_MAX=255
    mv parser.so ~/.local/share/nvim/plugged/nvim-treesitter/parser/$lang.so

    cd ../../
done
    

# env settings
echo "export PATH=$NVIM_IDE_INSTALL_RESULT:$PATH" > $NVIM_IDE_INSTALL_RESULT/env
echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $NVIM_IDE_INSTALL_RESULT/env

