" Set 'insert' mode as default
start

" Enable mouse only for all modes
set mouse=a

" Copy selected or yanked text by <MiddleMouse> button
snoremap <MiddleMouse> <C-g>y<LeftMouse><C-g>gP
inoremap <MiddleMouse> <LeftMouse><C-o>gP
nnoremap <MiddleMouse> <LeftMouse>gP

" Do not show mode in cmd line
set noshowmode

" Remove '~' char for empty lines
set fillchars=eob:\ 

" set blinking cursor
set guicursor=i-ci-ve:ver25-blinkon100

" display line numbers
set number

" always display sign column (for example, lsp diagnostic erros set appropriate character here)
set signcolumn=yes

" tab settings
set tabstop=4
set shiftwidth=4
set smarttab
set expandtab

" Show warning message on search after last match (and do not show search progress 'x/y')
set shortmess+=S

augroup NvimIdePerLangAutoCmds
    autocmd!

    " tabs but not spaces for golang
    autocmd FileType go set noexpandtab
augroup END

" indents
set autoindent
set smartindent

" prevent escape from moving the cursor one character to the left
let CursorColumnI = 0 "the cursor column position in INSERT
autocmd InsertEnter * let CursorColumnI = col('.')
autocmd CursorMovedI * let CursorColumnI = col('.')
autocmd InsertLeave * if col('.') != CursorColumnI | call cursor(0, col('.')+1) | endif

" set 'selection', 'selectmode', 'mousemodel' and 'keymodel' for MS-Windows
behave mswin

" backspace and cursor keys wrap to previous/next line
set backspace=indent,eol,start whichwrap+=<,>,[,]

" copy/paste to/from system clipboard
set clipboard+=unnamedplus

" CTRL-X is Cut
vnoremap <C-x> d<Esc>i

" CTRL-C is Copy
vmap <C-c> y

" CTRL-V is Paste
map <C-v> gPi
imap <C-v> <C-O>gP
vmap <C-v> <C-O>gP
snoremap <C-v> <C-g>"_dgP
cmap <C-v> <C-r>=getreg()<CR>
"     in 'terminal' mode
tmap <C-v> <C-\><C-N><C-v>

" CTRL-Z is Undo
noremap <C-z> u
inoremap <C-z> <C-O>u
smap <C-z> <Esc><C-z>

" CTRL-R is Redo
nnoremap <C-M-z> <C-r>
inoremap <C-M-z> <C-O><C-r>
snoremap <C-M-z> <Esc><C-r>

" CTRL-A is Select all
noremap <C-A> gggH<C-O>G
inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
cnoremap <C-A> <C-C>gggH<C-O>G
onoremap <C-A> <C-C>gggH<C-O>G
snoremap <C-A> <C-C>gggH<C-O>G
xnoremap <C-A> <C-C>ggVG

" Tab selected text
snoremap <Tab> <C-g>>

" Goto begin/end of file
" <C-home>
" <C-end>

" Goto line
noremap <C-g> :
inoremap <C-g> <C-O>:
snoremap <C-g> <Esc>:

" Proper scroll
noremap <silent> <PageUp> 1000<C-u>
noremap <silent> <PageDown> 1000<C-d>
inoremap <silent> <PageUp> <C-o>1000<C-u>
inoremap <silent> <PageDown> <C-o>1000<C-d>
snoremap <silent> <PageUp> <Esc>1000<C-u>
snoremap <silent> <PageDown> <Esc>1000<C-d>

" Deselect current selection to prevent extend selection on scroll
snoremap <ScrollWheelUp> <Esc><ScrollWheelUp>
snoremap <ScrollWheelDown> <Esc><ScrollWheelDown>


command! NvimIdeFullFilePath :echo expand("%:p")

" <Esc> complex behaviour
function! NvimIdeHasSignatureFloatingWindow()
    return len(filter(nvim_list_wins(), {k,v->nvim_win_get_config(v).relative == "win"})) == 1
endfunction

"     Map <Esc> to close 'signature' floating window if it exests. Note that '<M-/>' map should be in sync with 'lsp_signature.toggle_key' value from 'plugin_settings/lsp' file
inoremap <silent> <expr> <Esc> (NvimIdeHasSignatureFloatingWindow() ? '<C-o>:call feedkeys("\<M-/>")<CR>' : (v:hlsearch == 1 ? '<C-O>:noh<CR>' : '<Esc>'))

