" Search in files content using ripgrep.
" Main feature -- search by files on disk and modified files in vim in the same time (like search in files in IDEs).

" Tmp files suffix
let s:nvim_ide_tmp_files_suffix = "_nvim_ide_tmp"

" Special script for searhing by file content
function! s:GetGrepScriptPath()
    return NvimIdeGetProjectExtraFilesDir().'/search_in_content_grep'
endfunction

function! NvimIdeGetAliveBuffersOutput()
    redir => out
    exe "silent! buffers"
    silent! echo ""
    redir END

    return out
endfunction

function! NvimIdeGetChangedBufferIds()
    let allBuffers = NvimIdeGetAliveBuffersOutput()
    let changedBuffers = []
    for i in split(allBuffers, "\n")
        let s1 = 0
        while i[s1] == ' '
            let s1 += 1
        endwhile

        let s2 = stridx(i, ' ', s1) - 1
        let id = str2nr(i[s1 : s2])

        if getbufinfo(id)[0].changed
            call add(changedBuffers, id)
        endif
    endfor

    return changedBuffers
endfunction

function! s:GetStartIdx()
    let startIdx = len(g:nvim_ide_real_project_root)
    if g:nvim_ide_real_project_root[startIdx - 1] != '/'
        let startIdx = startIdx + 1
    endif

    return startIdx
endfunction

function! s:ContainsRootPath(fullPath)
    let idx = stridx(a:fullPath, g:nvim_ide_real_project_root)
    return idx != -1
endfunction

function! NvimIdeGetBuffersRelativePaths(bIds)
    let out = []
    let startIdx = s:GetStartIdx()
    for bi in a:bIds
        let fullPath = expand("#".bi.":p")
        if s:ContainsRootPath(fullPath)
            call add(out, fullPath[startIdx:])
        endif
    endfor

    return out
endfunction

function! NvimIdeGetRipgrepExclusionString(changedBufs)
    let modifiedFiles = NvimIdeGetBuffersRelativePaths(a:changedBufs)
    let out = ""
    for bn in modifiedFiles
        let out = out.' -g \!'.bn
    endfor

    return out
endfunction

function! NvimIdeSaveToTmps(changedBufs)
    let out = []
    if len(a:changedBufs) == 0
        return out
    endif

    let currBuf = bufnr()
    for bi in a:changedBufs
        let bufFilePath = expand("#".bi.":p")
        if len(bufFilePath) == 0
            continue
        endif

        let tmpF = bufFilePath.s:nvim_ide_tmp_files_suffix
        exe 'silent b'.bi.'|w! '.tmpF
        call add(out, tmpF)
    endfor
    exe 'silent b'.currBuf

    return out
endfunction

function! NvimIdeEchoWarning(msg)
    redraw
    echohl WarningMsg
    echo a:msg
    echohl None
endfunction

function s:HandleQuickfixSearchResult(ptrn)
    if len(getqflist())
        copen

        call NvimIdeQuickfixPostprocess(a:ptrn)
        call NvimIdeHighlightGlobalSearchPattern(a:ptrn)

        return 1
    endif

    return 0
endfunction

let s:search_completion_marker = "        \e[1;34m \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584  \e[0m"

function! NvimIdeGenGrepScript(changedBufs, savedTmps, rgExtraArgs)
    let basicSearcher = g:nvim_ide_content_search_rg_basic_cmd . ' ' . a:rgExtraArgs

    let scriptContent = []
    call add(scriptContent, '#!/bin/bash')

    call add(scriptContent, "")
    if len(a:savedTmps)
        let startIdx = s:GetStartIdx()
        let strTmps = ""
        for i in a:savedTmps
            if s:ContainsRootPath(i)
                let strTmps = strTmps . " " . i[startIdx:]
            endif
        endfor

        call add(scriptContent, basicSearcher . " \"$1\" " . strTmps . " | sed -e s/" . s:nvim_ide_tmp_files_suffix . "//g")
        call add(scriptContent, "rm " . strTmps)
    endif

    call add(scriptContent, "")
    call add(scriptContent, basicSearcher . ' ' . NvimIdeGetRipgrepExclusionString(a:changedBufs) . " \"$1\" ")

    call add(scriptContent, "")
    " search_completion_marker helps to distinguish long search from completed empty search
    call add(scriptContent, 'echo "' . s:search_completion_marker . '"')

    call add(scriptContent, "exit 0")

    call writefile(scriptContent, s:GetGrepScriptPath())
    silent exe '!chmod +x '.s:GetGrepScriptPath()
endfunction

function! NvimIdeSearchInFilesContent__OLD(extPtrn)
    let hasExtPtrn = len(a:extPtrn)

    if hasExtPtrn
        call NvimIdeHighlightGlobalSearchPattern(a:extPtrn)
    endif

    let null_input_word = '___nvim_ide_null_input___'
    let toSearch = input({'prompt':'Project search: ', 'cancelreturn':null_input_word})
    if toSearch == null_input_word
        if hasExtPtrn
            call NvimIdeRemoveGlobalSearchPatternHighlight()
        endif

        return 0
    endif

    if len(toSearch) == 0
        if hasExtPtrn
            let toSearch = a:extPtrn
            call histadd("input", toSearch)
        endif
    endif

    if len(toSearch) == 0
        let toSearch = expand("<cword>")
        call histadd("input", toSearch)
    endif

    if len(toSearch) == 0
        if hasExtPtrn
            call NvimIdeRemoveGlobalSearchPatternHighlight()
        endif

        call NvimIdeEchoWarning("Empty search pattern")
        return 0
    endif

    call NvimIdeRemoveGlobalSearchPatternHighlight()
    call NvimIdeClearAndCloseQuickfix()

    let changedBuffers = NvimIdeGetChangedBufferIds()
    let savedTmps = NvimIdeSaveToTmps(changedBuffers)
    call NvimIdeGenGrepScript(changedBuffers, savedTmps, "")
    let searcher = s:GetGrepScriptPath()


    let l:grepprg_au = &grepprg
    let l:grepformat_au = &grepformat
    let l:te = &t_te
    let l:ti = &t_ti
    let l:autochdir_au = &autochdir
    let l:shellpipe_au=&shellpipe

    let &grepprg = searcher
    let &grepformat = "%f:%l:%c:%m"
    set t_te=
    set t_ti=
    set noautochdir
    let &shellpipe="\\&>"
    let l:cwd_au = getcwd()
    exe 'cd ' . g:nvim_ide_real_project_root

    silent exe 'grep! "' . escape(toSearch, '()') . '"'
    let ret = s:HandleQuickfixSearchResult(toSearch)
    if ret == 0
        call NvimIdeEchoWarning("Not found: " . toSearch)
    endif

    exe 'cd '.l:cwd_au
    let &shellpipe=l:shellpipe_au
    let &autochdir=l:autochdir_au
    let &t_te=l:te
    let &t_ti=l:ti
    let &grepformat = l:grepformat_au
    let &grepprg = l:grepprg_au

    return ret
endfunction

function! s:rg_to_qf(line)
    let parts = matchlist(a:line, '\(.\{-}\)\s*:\s*\(\d\+\)\%(\s*:\s*\(\d\+\)\)\?\%(\s*:\(.*\)\)\?')
    let dict = {'filename': &acd ? fnamemodify(parts[1], ':p') : parts[1], 'lnum': parts[2], 'text': parts[4]}
    let dict.col = parts[3]
    return dict
endfunction

function! NvimIdeSearchInFilesContent(extPtrn)
    let hasExtPtrn = len(a:extPtrn)

    if hasExtPtrn
        call NvimIdeHighlightGlobalSearchPattern(a:extPtrn)
    endif

    let null_input_word = '___nvim_ide_null_input___'
    let toSearch = input({'prompt':'Project search: ', 'cancelreturn':null_input_word})
    if toSearch == null_input_word
        if hasExtPtrn
            call NvimIdeRemoveGlobalSearchPatternHighlight()
        endif

        return 0
    endif

    if len(toSearch) == 0
        if hasExtPtrn
            let toSearch = a:extPtrn
            call histadd("input", toSearch)
        endif
    endif

    if len(toSearch) == 0
        let toSearch = expand("<cword>")
        call histadd("input", toSearch)
    endif

    if len(toSearch) == 0
        if hasExtPtrn
            call NvimIdeRemoveGlobalSearchPatternHighlight()
        endif

        call NvimIdeEchoWarning("Empty search pattern")
        return 0
    endif

    call NvimIdeRemoveGlobalSearchPatternHighlight()
    call NvimIdeClearAndCloseQuickfix()

    let changedBuffers = NvimIdeGetChangedBufferIds()
    let savedTmps = NvimIdeSaveToTmps(changedBuffers)
    call NvimIdeGenGrepScript(changedBuffers, savedTmps, "--color=always")
    let searcher = s:GetGrepScriptPath()

    let cmdToSearch = searcher . ' ' . shellescape(escape(toSearch, '()'))
    function! OutputToQF(lines) closure
        let list = []
        for l in a:lines
            if l[0] == s:search_completion_marker[0]
                continue
            endif

            call add(list, s:rg_to_qf(l))
        endfor

        if len(list) == 1
            if resolve(expand('%:p')) != resolve(list[0].filename)
                exe 'e ' . list[0].filename
            endif

            call cursor(list[0].lnum, list[0].col)
            call NvimIdeCenterText()
            call NvimIdeHighlightGlobalSearchPattern(toSearch)
        else
            call setqflist([], 'r', {"title": cmdToSearch, "items": list})
            call s:HandleQuickfixSearchResult(toSearch)
        endif
    endfunction
    call fzf#run(fzf#wrap({'source': 'cd ' . g:nvim_ide_real_project_root . '; ' . cmdToSearch,
                                   \ 'options': ' --prompt="Project search> " --multi --history='.NvimIdeGetProjectExtraFilesDir().'/fzf_search_in_content_history' .
                                   \            ' --bind=' . g:nvim_ide_fzf_bind . ',ctrl-a:select-all' .
                                   \            ' --info=inline' .
                                   \            ' --ansi',
                                   \ 'dir': g:nvim_ide_real_project_root,
                                   \ 'sink*': function('OutputToQF')}))

    return 1
endfunction

