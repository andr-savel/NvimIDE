" Default values for optional project settings

if exists("g:nvim_ide_project_root")
    let g:nvim_ide_real_project_root = resolve(g:nvim_ide_project_root)
endif

"     Source for fzf
if !exists("g:nvim_ide_fzf_source")
    let g:nvim_ide_fzf_source = 'rg --files'
endif

"     Basic line for search in project files content using ripgrep
if !exists("g:nvim_ide_content_search_rg_basic_cmd")
    let g:nvim_ide_content_search_rg_basic_cmd = 'rg --vimgrep --smart-case'
endif


" Project configuration
"     Directory for extra files
let s:project_extra_files_dir = ''
function! NvimIdeGetProjectExtraFilesDir()
    if !exists("g:nvim_ide_project_root")
        return "/tmp"
    endif

    if s:project_extra_files_dir == ''
        let s:project_extra_files_dir = g:nvim_ide_project_root.'/.nvim_ide_project_extra'
        if !isdirectory(s:project_extra_files_dir)
            call mkdir(s:project_extra_files_dir)
        endif
    endif

    return s:project_extra_files_dir
endfunction

if exists("g:nvim_ide_cpp_compilation_database_command")
    "     Num threads for C/C++ language server
    if !exists("g:nvim_ide_cpp_language_server_threads")
        let g:nvim_ide_cpp_language_server_threads = 4
    endif
endif

function! s:RegenCompdb()
    exe 'Dispatch ' .. g:nvim_ide_cpp_compilation_database_command
endfunction
command! NvimIdeRegenCompdb :call s:RegenCompdb()

function! s:InitialCompDbCreation()
    if !exists("g:nvim_ide_cpp_compilation_database_command")
        return
    endif

    "     Gen compilation database
    let compileCommandsPath = g:nvim_ide_project_root . "/compile_commands.json"
    if empty(glob(compileCommandsPath))
        call s:RegenCompdb()
    endif
endfunction

augroup NvimIdeGetCppCompDb
    autocmd!
    autocmd VimEnter * call s:InitialCompDbCreation()
augroup END

"     Build command for project (C/C++, go)
if exists("g:nvim_ide_build_command")
    let &makeprg=g:nvim_ide_build_command
endif

"     Settings for debugger
if !exists("g:nvim_ide_debuggee_binary_path")
    let g:nvim_ide_debuggee_binary_path = ''
endif

if !exists("g:nvim_ide_debuggee_binary_args")
    let g:nvim_ide_debuggee_binary_args = ''
endif

if !exists("g:nvim_ide_cpp_debugger_source_map")
    let g:nvim_ide_cpp_debugger_source_map = []
endif

"     Icons
if !exists("g:nvim_ide_allow_icons")
    let g:nvim_ide_allow_icons = v:false
endif

