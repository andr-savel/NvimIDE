function! NvimIdeGetReferences(isInsertMode)
    lua vim.lsp.buf.references()
" TODO: only requested symbol should be highlighted (not simple highlight). Or do not highligh references.
    call NvimIdeQuickfixPostprocess(a:isInsertMode, expand("<cword>"))
endfunction

lua << EOF
    local lspconfig = require('lspconfig')
    local lsp_status = require('lsp-status')

    lsp_status.config({
        current_function = false,
        show_filename = false,

        -- TODO: tune nvim-web-devicons and get rid of the following section
        indicator_errors = 'E',
        indicator_warnings = 'W',
        indicator_info = 'i',
        indicator_hint = '?',
        indicator_ok = 'Ok',
        status_symbol = ''
    })

    -- Common settings and maps
    local opts = {noremap=true, silent=true}

    -- vim.lsp.set_log_level("debug")

    lsp_status.register_progress()
    vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
        vim.lsp.diagnostic.on_publish_diagnostics, {
            update_in_insert = true
        }
    )

    -- Use an on_attach function to only map the following keys
    -- after the language server attaches to the current buffer

    goto_definition_and_center_line = function(mode)
        local util = require 'vim.lsp.util'
        local params = util.make_position_params()
        local default_definition_handler = require("vim.lsp.handlers")['textDocument/definition']
        local custom_definition_handler = function(err, result, ctx, config)
            default_definition_handler(err, result, ctx, config)
            special_symbol = ""
            if mode == "i" then
                special_symbol = vim.api.nvim_replace_termcodes("<C-o>", true, false, true)
            end
            vim.fn.feedkeys(special_symbol .. "zz")
        end
        vim.lsp.buf_request(0, 'textDocument/definition', params, custom_definition_handler)
    end

    local on_attach = function(client, bufnr)
        -- Maps
        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<F2>', '<cmd>lua goto_definition_and_center_line("n")<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'i', '<F2>', '<cmd>lua goto_definition_and_center_line("i")<CR>', opts)

        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-u>', '<cmd>lua vim.fn["NvimIdeGetReferences"](0)<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'i', '<C-u>', '<cmd>lua vim.fn["NvimIdeGetReferences"](1)<CR>', opts)
        -- TODO: highlight 'references result'

        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-r>', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'i', '<C-r>', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)

        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<F4>', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'i', '<F4>', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)

        -- 'lsp_signature' plugin initialized here. Otherwize (on standalone initialization) floating window not appear after multiple files editing and save.
        require("lsp_signature").on_attach({
            hint_enable = false,
            -- Default value "LspSignatureActiveParameter" is changed to "IncSearch" to highlight current parameter in each color scheme
            hi_parameter = "IncSearch"
        })

        -- Highlight symbol under cursor
        require('illuminate').on_attach(client)
        vim.cmd([[hi LspReferenceText cterm=underline gui=underline]])
        vim.cmd([[hi LspReferenceRead cterm=underline gui=underline]])
        vim.cmd([[hi LspReferenceWrite cterm=underline gui=underline]])
        vim.cmd([[autocmd CursorHold  <buffer> lua vim.lsp.buf.document_highlight()]])
        vim.cmd([[autocmd CursorHoldI <buffer> lua vim.lsp.buf.document_highlight()]])
        vim.cmd([[autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()]])

        lsp_status.on_attach(client)
    end

    -- Server-specific settings
    function GetCCLSCacheDir()
        return vim.fn["NvimIdeGetProjectExtraFilesDir"]() .. "/ccls-cache"
    end

    function GetCCLSInitialBlacklist()
        if vim.fn["empty"](vim.fn["glob"](GetCCLSCacheDir())) == 1 then
            return {}
        end

        return {"."}
    end

    local servers = {
        ccls = {
            init_options = {
                compilationDatabaseCommand = vim.g["nvim_ide_cpp_compilation_database_command"],
                cache = {
                    directory = GetCCLSCacheDir()
                },
                index = {
                    onChange = true,
                    -- Whole project should be reindexed on startup ony when ccls-cache dir is absent
                    initialBlacklist = GetCCLSInitialBlacklist()
                },
                diagnostics = {
                    onChange = 50
                },
                completion = {
                    -- Disable snippets on confirmed completion (insert the name of selected function/variable without parameters)
                    placeholder = false
                }
            }
        }
    }

    -- TODO: find all implementations of virtual functions. ccsl can do it only if cursor stand on pure virtual function (maybe clangd better here)
    -- TODO: find symbol/class by name. Possibly fzf should be used to filter candidates
    -- TODO: try clangd (it can be faster and do not reindex whole project first cpp file open)
    -- TODO: goto symbol definition only if current file has been reindexed (currently this function uses old index and it leads to errors)

    -- Set common settings and setup servers
    local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
    capabilities = vim.tbl_extend('keep', capabilities, lsp_status.capabilities)
    for lsp, settings in pairs(servers) do
        -- Common settings for all servers
        settings["on_attach"] = on_attach
        settings["flags"] = {
            -- This will be the default in neovim 0.7+
            debounce_text_changes = 150
        }
        settings["root_dir"] = function(nm)
            return vim.g["nvim_ide_project_root"] 
        end
        settings["capabilities"] = capabilities

        -- Setup final set of settings fo particular server
        lspconfig[lsp].setup(settings)
    end
EOF

