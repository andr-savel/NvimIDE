function! NvimIdeGetReferences(isInsertMode)
    lua vim.lsp.buf.references()
    call NvimIdeQuickfixPostprocess(a:isInsertMode, expand("<cword>"))
endfunction

lua << EOF
    -- Common settings and maps
    local opts = {noremap=true, silent=true}

    vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
        vim.lsp.diagnostic.on_publish_diagnostics, {
            update_in_insert = true
        }
    )
    -- TODO: display counter of diagnostic problems for current buffer in status string

    -- Use an on_attach function to only map the following keys
    -- after the language server attaches to the current buffer
    local on_attach = function(client, bufnr)
        -- Maps
        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<F2>', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'i', '<F2>', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)

        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-u>', '<cmd>lua vim.fn["NvimIdeGetReferences"](0)<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'i', '<C-u>', '<cmd>lua vim.fn["NvimIdeGetReferences"](1)<CR>', opts)
        -- TODO: highlight 'references result'

        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-r>', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'i', '<C-r>', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)

        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<F4>', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'i', '<F4>', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
    end

    -- Server-specific settings
    local servers = {
        ccls = {
            init_options = {
                compilationDatabaseCommand = vim.g["nvim_ide_cpp_compilation_database_command"],
                cache = {
                    directory = vim.fn["NvimIdeGetProjectExtraFilesDir"]() .. "/ccls-cache",
                }
            }
        }
    }

    -- Set common settings and setup servers
    for name, lsp in pairs(servers) do
        -- Common settings for all servers
        lsp["on_attach"] = on_attach
        lsp["flags"] = {
            -- This will be the default in neovim 0.7+
            debounce_text_changes = 150
        }

        -- Setup final set of settings fo particular server
        require('lspconfig')[name].setup(lsp)
    end
EOF

