" To change current directory automatically according to opened file in current window
set autochdir

" Switch windows
noremap <C-w> <C-w>w
inoremap <C-w> <C-O><C-w>w
snoremap <C-w> <Esc><C-w>w
cnoremap <C-w> <C-O><C-w>w
onoremap <C-w> <C-O><C-w>w
"     in 'terminal' mode
tnoremap <C-w> <C-\><C-N><C-w>wi

" Switch tabs
noremap <silent> <C-Up> :tabprev<CR>
inoremap <silent> <C-Up> <C-O>:tabprev<CR>
snoremap <silent> <C-Up> <Esc>:tabprev<CR>
cnoremap <silent> <C-Up> <C-O>:tabprev<CR>
onoremap <silent> <C-Up> <C-O>:tabprev<CR>

noremap <silent> <C-Down> :tabnext<CR>
inoremap <silent> <C-Down> <C-O>:tabnext<CR>
snoremap <silent> <C-Down> <Esc>:tabnext<CR>
cnoremap <silent> <C-Down> <C-O>:tabnext<CR>
onoremap <silent> <C-Down> <C-O>:tabnext<CR>

" Close window without closing buffer
noremap <M-c> <C-w>c
inoremap <M-c> <C-O><C-w>c
cnoremap <M-c> <C-O><C-w>c
onoremap <M-c> <C-O><C-w>c
"     in 'terminal' mode
tnoremap <M-c> <C-\><C-N><C-w>c

" Close buffer without closing window
" Do not switch to 'QuickFix' buffer on it's existence
function! NvimIdeCloseCurrBuf()
    let currBuf = bufnr()
    if getbufinfo(currBuf)[0].changed == 1
        throw "NvimIde: failed to close modified buffer"
    endif

    exe 'silent bn'

    let err = ""
    try
        if getbufinfo(bufnr())[0].variables.current_syntax == 'qf'
            exe 'silent bn'
            if bufnr() == currBuf
                let err = "NvimIde: failed to close the only file buffer"
            endif
        endif
    catch
    endtry

    if len(err)
        throw err
    endif

    exe 'bd '.currBuf
endfunction

noremap <silent> <M-z> :call NvimIdeCloseCurrBuf()<CR>
inoremap <silent> <M-z> <C-O>:call NvimIdeCloseCurrBuf()<CR>

" Split window vertically
noremap <silent> <M-m> <C-w>v<C-w>w
inoremap <silent> <M-m> <C-O><C-w>v<C-o><C-w>w

" Switch buffers
function! NvimIdeBuffers()
    let l:cwd_au = getcwd()
    exe 'cd '.g:nvim_ide_project_root
    call fzf#vim#buffers({'options': ['--layout=reverse', '--cycle', '--exact']})
    exe 'cd '.l:cwd_au
endfunction

inoremap <C-PageUp> <C-o>:call NvimIdeBuffers()<CR>
nnoremap <C-PageUp> :call NvimIdeBuffers()<CR>
tnoremap <C-PageUp> <C-\><C-N>:call NvimIdeBuffers()<CR>
inoremap <C-PageDown> <C-o>:call NvimIdeBuffers()<CR>
nnoremap <C-PageDown> :call NvimIdeBuffers()<CR>
tnoremap <C-PageDown> <C-\><C-N>:call NvimIdeBuffers()<CR>

" Win/Buf navigation using 'jumps'
" TODO: test 'set jumpoptions+=stack' behaviour

augroup NvimIdeWindows
    autocmd!
    autocmd VimEnter * clearjumps
augroup END

noremap <M-left> <C-o>zz
inoremap <M-left> <C-o><C-o><C-o>zz
snoremap <M-left> <Esc><C-o>zz

noremap <M-right> <C-i>zz
inoremap <M-right> <C-o><C-i><C-o>zz
snoremap <M-right> <Esc><C-i>zz

" Quickfix window

" TODO: 'has_quickfix_movements' detection should be rewritten: set var local for quickfix buffer which indicates should we move farward or not

let s:has_quickfix_movements = 0
augroup NvimIdeQuickfix
    autocmd!
    autocmd BufReadPost quickfix let s:has_quickfix_movements = 0
augroup END

"     Next/prev in quickfix window. Quickfix is used for search results, 'LSP usage' results, etc.
function! NvimIdeNextQFItem()
    if s:has_quickfix_movements
        cn
    else
        cc
    endif
    let s:has_quickfix_movements = 1
endfunction

" TODO: implement same kays for next/prev for LSP diagnostic errors when they are exists
"     item
nnoremap <M-down> :call NvimIdeNextQFItem()<CR>
inoremap <M-down> <C-o>:call NvimIdeNextQFItem()<CR>
nnoremap <M-up> :cp<CR>
inoremap <M-up> <C-o>:cp<CR>
"     file
nnoremap <C-M-down> :cnf<CR>
inoremap <C-M-down> <C-o>:cnf<CR>
nnoremap <C-M-up> :cpf<CR>
inoremap <C-M-up> <C-o>:cpf<CR>

"     Close quickfix window.
function! NvimIdeClearAndCloseQuickfix()
    cclose
    cexpr []
endfunction

" TODO: possibly detection quickfix existence should be checked to close it under condition and move to insert mode
nnoremap <silent> <Esc> :call NvimIdeClearAndCloseQuickfix()<CR>i

" Highlight function
function! NvimIdeHighlightResults(isInsertMode, ptrn)
    let @/=escape(substitute(a:ptrn, '"', '', 'g'), '|')

    if a:isInsertMode
        call feedkeys("\<C-o>:let &hlsearch=1\<CR>", 'n')
    else
        call feedkeys(":let &hlsearch=1\<CR>", 'n')
    endif
endfunction

function! NvimIdeQuickfixPostprocess(isInsertMode, ptrn)
    call NvimIdeHighlightResults(a:isInsertMode, a:ptrn)
    " Goto previous windows (probably with code)
    " wincmd p
endfunction

